import os
import re
import logging
import asyncio
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode, MessageEntityType
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
import redis.asyncio as redis
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
REDIS_URL = os.getenv("REDIS_URL")
USE_HTTP_SERVER = os.getenv("USE_HTTP_SERVER", "0") == "1"  # –î–ª—è Render Web Services

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)

bot = Bot(token=BOT_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
redis_client = None
storage = None

if REDIS_URL:
    try:
        redis_client = redis.from_url(REDIS_URL, decode_responses=True)
        storage = RedisStorage(redis=redis_client)
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Redis")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        redis_client = None
        storage = None
else:
    logger.warning("REDIS_URL –Ω–µ —É–∫–∞–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è in-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.")

dp = Dispatcher(storage=storage)

# –ü—Ä–æ—Å—Ç–æ–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render Web Services
async def web_server():
    app = web.Application()
    app.router.add_get('/', handle_root)
    runner = web.AppRunner(app)
    await runner.setup()
    
    # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ä—Ç –∏ —Ö–æ—Å—Ç
    site = web.TCPSite(runner, host='0.0.0.0', port=10000)
    await site.start()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–ø—É—Å–∫–∞
    logger.info(f"‚úÖ HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 10000")
    return site  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–µ—Ä–≤–µ—Ä–∞

async def handle_root(request):
    return web.Response(text="Anti-Duplicate Link Bot is running")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏
async def increment_cleanup_counter(chat_id: int) -> int:
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
    if not redis_client:
        return 0
        
    key = f"chat:{chat_id}:counter"
    try:
        count = await redis_client.incr(key)
        if count >= 365:
            await redis_client.set(key, 0)
        return count
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
        return 0

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def normalize_url(url: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏–º URL –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    url = url.split('?')[0].split('#')[0]
    if url.endswith('/'):
        url = url[:-1]
    return url.lower()

def extract_links(message: types.Message) -> list:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–µ–π —Å —É—á—ë—Ç–æ–º Telegram entities"""
    urls = []
    text = message.text or message.caption or ""
    
    entities = message.entities or message.caption_entities or []
    for entity in entities:
        if entity.type == MessageEntityType.URL:
            url = text[entity.offset:entity.offset + entity.length]
            urls.append(url)
        elif entity.type == MessageEntityType.TEXT_LINK:
            urls.append(entity.url)
    
    if not urls:
        url_pattern = re.compile(
            r'https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+[/\w\.\-?=%&#@!$+]*'
        )
        urls = url_pattern.findall(text)
    
    normalized = []
    for url in urls:
        n_url = normalize_url(url)
        if n_url not in normalized:
            normalized.append(n_url)
    
    return normalized

async def save_link(chat_id: int, url: str, message_id: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Å—ã–ª–∫—É –≤ Redis"""
    if not redis_client:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
    link_data = await get_link_data(chat_id, url) or {
        "message_id": message_id,
        "timestamp": datetime.now().isoformat(),
        "likes": {},    # –°–ª–æ–≤–∞—Ä—å –ª–∞–π–∫–æ–≤
        "thumbs_up": {} # –°–ª–æ–≤–∞—Ä—å —Ä–µ–∞–∫—Ü–∏–π üëç
    }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—Ä–µ–º—è
    link_data["message_id"] = message_id
    link_data["timestamp"] = datetime.now().isoformat()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
    await redis_client.hset(
        f"chat:{chat_id}", 
        url, 
        json.dumps(link_data)
    )

async def get_link_data(chat_id: int, url: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å—Å—ã–ª–∫–µ –∏–∑ Redis"""
    if not redis_client:
        return None
    
    data = await redis_client.hget(f"chat:{chat_id}", url)
    return json.loads(data) if data else None

async def add_reaction(chat_id: int, url: str, user_id: int, username: str, reaction_type: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –∫ —Å—Å—ã–ª–∫–µ"""
    if not redis_client:
        return False
    
    link_data = await get_link_data(chat_id, url)
    if not link_data:
        return False
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ —Ä–µ–∞–∫—Ü–∏–π
    for r_type in ["likes", "thumbs_up"]:
        if r_type not in link_data:
            link_data[r_type] = {}
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
    if reaction_type == "like":
        link_data["likes"][str(user_id)] = username
    elif reaction_type == "thumbs_up":
        link_data["thumbs_up"][str(user_id)] = username
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await redis_client.hset(f"chat:{chat_id}", url, json.dumps(link_data))
    return True

async def cleanup_old_links(chat_id: int):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å—Å—ã–ª–∫–∏ (—Å—Ç–∞—Ä—à–µ 365 –¥–Ω–µ–π)"""
    if not redis_client:
        return
    
    all_links = await redis_client.hgetall(f"chat:{chat_id}")
    now = datetime.now()
    keys_to_delete = []
    
    for url, data_json in all_links.items():
        try:
            data = json.loads(data_json)
            timestamp = datetime.fromisoformat(data["timestamp"])
            
            if (now - timestamp) > timedelta(days=365):
                keys_to_delete.append(url)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {e}")
            continue
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å—Å—ã–ª–∫–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    if keys_to_delete:
        await redis_client.hdel(f"chat:{chat_id}", *keys_to_delete)
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {len(keys_to_delete)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å—Å—ã–ª–æ–∫ –≤ —á–∞—Ç–µ {chat_id}")

async def delete_after_delay(message: types.Message, delay: int = 600):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)"""
    await asyncio.sleep(delay)
    try:
        await message.delete()
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ {message.message_id} —É–¥–∞–ª–µ–Ω–æ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏")
    except (TelegramForbiddenError, TelegramBadRequest) as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞: {e}")

async def generate_stats(chat_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –≤ —á–∞—Ç–µ"""
    if not redis_client:
        return "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω."
    
    all_links = await redis_client.hgetall(f"chat:{chat_id}")
    if not all_links:
        return "–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫."
    
    stats = []
    for url, data_json in all_links.items():
        try:
            data = json.loads(data_json)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            link_stats = []
            
            # –õ–∞–π–∫–∏
            likes = data.get("likes", {})
            if likes:
                users = [f"@{username}" if username else f"id{user_id}" 
                         for user_id, username in likes.items()]
                link_stats.append(f"‚ù§Ô∏è –õ–∞–π–∫–∏: {len(likes)} ({', '.join(users)})")
            
            # –ë–æ–ª—å—à–∏–µ –ø–∞–ª—å—Ü—ã –≤–≤–µ—Ä—Ö
            thumbs_up = data.get("thumbs_up", {})
            if thumbs_up:
                users = [f"@{username}" if username else f"id{user_id}" 
                         for user_id, username in thumbs_up.items()]
                link_stats.append(f"üëç –ë–æ–ª—å—à–∏–µ –ø–∞–ª—å—Ü—ã: {len(thumbs_up)} ({', '.join(users)})")
            
            if link_stats:
                stats.append(f"üîó {url}\n" + "\n".join(link_stats) + "\n")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {url}: {e}")
    
    if not stats:
        return "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ü–µ–Ω–∏–ª —Å—Å—ã–ª–∫–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ."
    
    return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∞–∫—Ü–∏–π:\n\n" + "\n".join(stats)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if message.chat.type == "private":
        await message.answer(
            "üõ°Ô∏è –Ø –±–æ—Ç-–∞–Ω—Ç–∏–¥—É–±–ª–∏–∫–∞—Ç–æ—Ä —Å—Å—ã–ª–æ–∫ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é!\n\n"
            "–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∞–º–∏:\n"
            "‚Ä¢ –£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –í–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            "–Ø –∑–∞–ø–æ–º–∏–Ω–∞—é –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ 365 –¥–Ω–µ–π, –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞!\n\n"
            "–¢–∞–∫–∂–µ —è —É–º–µ—é —Å–æ–±–∏—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∞–∫—Ü–∏–π –ø–æ —Å—Å—ã–ª–∫–∞–º!",
            parse_mode=ParseMode.HTML
        )

@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    chat_id = message.chat.id
    if redis_client:
        link_count = await redis_client.hlen(f"chat:{chat_id}")
        await message.answer(
            f"üìä –°—Ç–∞—Ç—É—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:\n\n"
            f"‚Ä¢ –°—Å—ã–ª–æ–∫ –≤ –ø–∞–º—è—Ç–∏: <b>{link_count}</b>\n"
            f"‚Ä¢ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Redis\n"
            f"‚Ä¢ –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è: 365 –¥–Ω–µ–π",
            parse_mode=ParseMode.HTML
        )
    else:
        await message.answer(
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏. "
            "–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.",
            parse_mode=ParseMode.HTML
        )

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∞–∫—Ü–∏–π"""
    chat_id = message.chat.id
    stats = await generate_stats(chat_id)
    await message.answer(stats, parse_mode=ParseMode.HTML)

@dp.message(F.text | F.caption)
async def check_duplicate_links(message: types.Message):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    if message.sender_chat or (message.from_user and message.from_user.id == (await bot.me()).id):
        return
    
    chat_id = message.chat.id
    links = extract_links(message)
    
    if not links:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–π
        if message.reply_to_message:
            replied_message = message.reply_to_message
            replied_links = extract_links(replied_message)
            
            if replied_links:
                user_id = message.from_user.id
                username = message.from_user.username
                text = message.text.lower() if message.text else ""
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏
                reaction_type = None
                if text in ["–Ω—Ä–∞–≤–∏—Ç—Å—è", "like"]:
                    reaction_type = "like"
                elif "üëç" in text or "thumb" in text:
                    reaction_type = "thumbs_up"
                
                if reaction_type:
                    for link in replied_links:
                        success = await add_reaction(
                            chat_id, 
                            link, 
                            user_id, 
                            username,
                            reaction_type
                        )
                    
                    if success:
                        await message.reply("‚úÖ –í–∞—à–∞ —Ä–µ–∞–∫—Ü–∏—è —É—á—Ç–µ–Ω–∞!")
                        asyncio.create_task(delete_after_delay(message, delay=10))
                    return
        return
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    duplicate_found = False
    duplicate_url = None
    original_message_id = None
    
    for link in links:
        link_data = await get_link_data(chat_id, link)
        if link_data:
            duplicate_found = True
            duplicate_url = link
            original_message_id = link_data["message_id"]
            break
    
    # –®–∞–≥ 2: –ï—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω - —É–¥–∞–ª—è–µ–º –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º
    if duplicate_found:
        try:
            await message.delete()
        except TelegramForbiddenError:
            logger.error(f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}")
            await message.reply("‚ö†Ô∏è –£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        except TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if str(chat_id).startswith("-100"):
            chat_part = str(chat_id)[4:]
        else:
            chat_part = chat_id
        
        response = (
            f"üëÆ‚ôÇÔ∏è <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç —Å—Å—ã–ª–∫–∏!</b>\n\n"
            f"–Ø –Ω–∞—à–µ–ª –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:\n"
            f"<code>{duplicate_url}</code>\n\n"
            f"<a href='https://t.me/c/{chat_part}/{original_message_id}'>‚Üí –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É</a>"
        )
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥—É–±–ª–∏–∫–∞—Ç–µ
            warning_msg = await bot.send_message(
                chat_id=chat_id,
                text=response,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç (600 —Å–µ–∫—É–Ω–¥)
            asyncio.create_task(delete_after_delay(warning_msg))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {e}")
        
        return
    
    # –®–∞–≥ 3: –ï—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï —Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    for link in links:
        await save_link(chat_id, link, message.message_id)
    
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(links)} —Å—Å—ã–ª–æ–∫ –≤ —á–∞—Ç–µ {chat_id}")

    # –®–∞–≥ 4: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Å—ã–ª–æ–∫ (1 —Ä–∞–∑ –Ω–∞ 365 —Å–æ–æ–±—â–µ–Ω–∏–π)
    current_count = await increment_cleanup_counter(chat_id)
    if current_count >= 365:
        await cleanup_old_links(chat_id)
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Å—ã–ª–æ–∫ –≤ —á–∞—Ç–µ {chat_id}")

    # –®–∞–≥ 5: –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–∞–∫—Ü–∏–π –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å–æ —Å—Å—ã–ª–∫–æ–π
    if message.chat.type != "private":
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"reaction_like_{message.message_id}")
        builder.button(text="üëç –ü–∞–ª–µ—Ü –≤–≤–µ—Ä—Ö", callback_data=f"reaction_thumbs_{message.message_id}")
        builder.adjust(2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        
        await message.reply(
            "–û—Ü–µ–Ω–∏—Ç–µ —Å—Å—ã–ª–∫—É:",
            reply_markup=builder.as_markup()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query(F.data.startswith("reaction_"))
async def handle_reaction_callback(callback: types.CallbackQuery):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏ –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è
        parts = callback.data.split("_")
        reaction_type = parts[1]  # like –∏–ª–∏ thumbs
        message_id = int(parts[2])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞
        message = await bot.get_message(
            chat_id=callback.message.chat.id,
            message_id=message_id
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_id = callback.message.chat.id
        links = extract_links(message)
        
        if links:
            user_id = callback.from_user.id
            username = callback.from_user.username
            
            for link in links:
                await add_reaction(
                    chat_id, 
                    link, 
                    user_id, 
                    username,
                    reaction_type
                )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            emoji = "‚ù§Ô∏è" if reaction_type == "like" else "üëç"
            await callback.answer(f"{emoji} –í–∞—à–∞ —Ä–µ–∞–∫—Ü–∏—è —É—á—Ç–µ–Ω–∞!")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await callback.message.delete()
        else:
            await callback.answer("‚ùå –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("Starting bot...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
    if redis_client:
        try:
            await redis_client.ping()
            logger.info("Redis –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –°–ò–ù–•–†–û–ù–ù–û –ø–µ—Ä–µ–¥ –±–æ—Ç–æ–º
    http_server = None
    if USE_HTTP_SERVER:
        http_server = await web_server()  # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞...")
    me = await bot.get_me()
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.username} (ID: {me.id})")
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())